---
- name: "Kill the bridge (this is required because of the way the bridge works -- if there's a running instance the proceeding info command would be ignored)"
  set_fact:
      protonmail_bridge_pkill: "{{ lookup('pipe', 'pkill -f protonmail-bridge' ) }}"
  ignore_errors: "true"

- name: "Check if the user has already been added to the bridge"
  set_fact:
      protonmail_bridge_info: "{{ lookup('pipe', command_protonmail_bridge_info ) }}"
  notify: "restart protonmail-bridge-headless"

- name: "Restart the service since we killed it to gather facts (shouldn't use handler to ensure idempotency)"
  set_fact:
      protonmail_bridge_pkill: "{{ lookup('pipe', 'systemctl restart protonmail-bridge-headless.service || true' ) }}"

- name: "Parse the local user's email and password from protonmail-bridge info"
  set_fact:
      protonmail_password_local: "{{ protonmail_bridge_info | regex_search('(?ims).*Password: *([^\\r\\n]+)', '\\1') | default([], True)  | join('') }}"
      protonmail_email_local: "{{ protonmail_bridge_info | regex_search('(?ims).*Username: *([^\\r\\n]+)', '\\1') | default([], True)  | join('') }}"

- name: "Prompt the user for a two-factor authentication code if required"
  pause:
      prompt: "Please input a two-factor authentication code (wait for a fresh code to avoid having it expire before being used)"
  when: protonmail_enable_2fa|bool
  register: protonmail_2fa_code

- name: "Kill the protonmail-bridge if we need to run the login"
  shell: "killall protonmail-bridge || true"
  when: "not protonmail_email_local or not protonmail_password_local"

- name: "Add user to protonmail-bridge"
  vars:
      code_expect: "{{ '' if protonmail_2fa_code.skipped is defined else command_protonmail_2fa_code_expect }}"
  become: "yes"
  become_method: "su"
  become_user: "{{ protonmail_user }}"
  shell: |
      set timeout -1
      spawn /usr/bin/protonmail-bridge --cli --no-window
      expect ">>>" {
          send "login\r"
      }
      expect "Username:" {
          send "{{ protonmail_username }}\r"
      }
      expect "Password:" {
          send "{{ protonmail_password }}\r"
      }
      {{ code_expect }}
      expect ">>>" {
          send "info\r"
      }
      expect -re "Security:.*>>>" {
          send "exit\r"
      }
      interact
  args:
      executable: "/usr/bin/expect"
  register: "protonmail_bridge_info"
  when: "not protonmail_email_local or not protonmail_password_local"
  notify: "restart protonmail-bridge-headless"

- name: "Export the protonmail-bridge certificate"
  become: "yes"
  become_method: "su"
  become_user: "{{ protonmail_user }}"
  shell: |
    set timeout -1
    spawn /usr/bin/protonmail-bridge --cli --no-window
    expect ">>>" {
        send "export-tls-cert\r"
    }
    expect -re ".*path.*" {
        send "{{ protonmail_bridge_config_dir }}/\r"
    }
    expect ">>>" {
        send "exit\r"
    }
    interact
  args:
    executable: "/usr/bin/expect"
  when: "not protonmail_email_local or not protonmail_password_local"
  notify: "restart protonmail-bridge-headless"

- name: "Parse the local user's email and password from protonmail-bridge info"
  set_fact:
      protonmail_password_local: "{{ protonmail_bridge_info.stdout | regex_search('(?ims).*Password: *([^\\r\\n]+)', '\\1') | join('')  }}"
      protonmail_email_local: "{{ protonmail_bridge_info.stdout | regex_search('(?ims).*Username: *([^\\r\\n]+)', '\\1') | join('')  }}"
  when: "not protonmail_email_local or not protonmail_password_local"

- name: "Add a symlink to the protonmail-bridge self-signed certificate on non-RHEL machines (required for postfix to communicate with bridge correctly)"
  file:
      src: "{{ protonmail_bridge_config_dir }}/cert.pem"
      dest: "/etc/ssl/certs/protonmail-bridge.pem"
      state: "link"
  notify: "restart postfix"
  register: "symlinked_cert_to_trust_store"
  when: "ansible_os_family != 'RedHat'"

- name: "Explicitly trust the above cert on Archlinux"
  command: "trust anchor /etc/ssl/certs/protonmail-bridge.pem"
  notify: "restart postfix"
  when: "ansible_os_family == 'Archlinux' and symlinked_cert_to_trust_store.changed"

- name: "Add a symlink to the protonmail-bridge self-signed certificate on RHEL machines"
  file:
      src: "{{ protonmail_bridge_config_dir }}/cert.pem"
      dest: "/etc/pki/ca-trust/source/anchors/protonmail-bridge.pem"
      state: "link"
  notify: "restart postfix"
  register: "symlinked_cert_to_trust_store"
  when: "ansible_os_family == 'RedHat'"

- name: "enable the dynamic CA configuration feature"
  command: "update-ca-trust force-enable"
  when: "ansible_os_family == 'RedHat' and symlinked_cert_to_trust_store.changed"

- name: "set SELinux types"
  command: "semanage fcontext -a -t cert_t /etc/pki/ca-trust/source/anchors/protonmail-bridge.pem"
  when: "configure_selinux and symlinked_cert_to_trust_store.changed"

- name: "apply SELinux file contexts to filesystem"
  command: "restorecon -irv /etc/pki/ca-trust/source/anchors/protonmail-bridge.pem"
  when: "configure_selinux and symlinked_cert_to_trust_store.changed"

- name: "add the root cert to the server"
  command: "update-ca-trust extract"
  when: "ansible_os_family == 'RedHat' and symlinked_cert_to_trust_store.changed"